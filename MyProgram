package prog2.finalgroup;

import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.List;

public class MyProgram {

    public static void main(String[] args) {
        MyProgram program;
        try {
            program = new MyProgram();
            program.run();
        } catch (FileNotFoundException exception1) {
            System.out.println("The data file does not exist.");
        } catch (Exception exception2) {
            exception2.printStackTrace();
        }
        System.exit(0);
    }

    public void run() throws FileNotFoundException, Exception {
        Scanner keyboard = new Scanner(System.in);
        int choice;

        do {
            System.out.println("Welcome to ------");
            System.out.println("<1> Show data");
            System.out.println("<2> Sort data");
            System.out.println("<3> Compare data");
            System.out.println("<4> Compute data");
            System.out.println("<5> Filter data");
            System.out.println("<6> Search for... in data");
            System.out.println("<7> Modify data");
            System.out.println("<8> Exit");
            System.out.print("Enter a number corresponding to your choice: ");
            choice = keyboard.nextInt();
            keyboard.nextLine();

            switch (choice) {
                case 1:

                    MyProgramUtility utility = new MyProgramUtility();
                    List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
                    for (Citizen citizen : citizens) {
                        System.out.printf("%s%n", citizen);
                    }
                        break;
                        case 2:
                            /**
                             * SORTING OPTION HERE:
                             * - Menu 1, ascending or descending order?
                             * - Menu 2:
                             * 1 Sort data based on names
                             * 2 Sort data based on age
                             * 3 Sort data based on district number
                             * 4 Sort data based on gender
                             * 5 Sort data based on type of residency
                             */
                            break;
                        case 3:
                            /**
                             * COMPARING OPTION HERE:
                             * Compare 2 entities:
                             * - Menu 1: Input: (Last name, First name)
                             * - Enter Name 1:
                             * - Enter Name 2:
                             * - result must be ("Name", "age" is older than "Name","age" ) ("Name", "residency" is a resident whilst "Name","residency" is not) etc.,
                             * - (display compared result on age, type of residency, district number, and gender)
                             */
                            break;
                        case 4:
                            /**
                             * COMPUTE OPTION HERE:
                             * Compute for:
                             * 1 Total males & females (Total males are: "" and total females are: "")
                             * 2 Total residents & non-residents (Total residents are: "" and total non-residents are: "")
                             * 3 Total number of people in a district (Total people in district "" are: "")
                             * 4 Total residents and non-residents that are in a specific district (separated) (Total residents in district "" are: "" and the total non-residents in district "" are: "" )
                             * 5 Total males and females in a specific district (Total males in district "" are: "" and the total females in district "" are: "" )
                             * 6 Average of all ages
                             * 7 Average of ages per district (Average age of district "": "")
                             */
// wait lang mga teh di ako sure kasi  may error kingina
                            /**
                    Scanner scanner;
                    while (true) {
                        System.out.println("Compute for: ");
                        System.out.println("1. Total males & females");
                        System.out.println("2. Total residents & non-residents");
                        System.out.println("3. Total number of people in a district");
                        System.out.println("4. Total residents and non-residents in a district");
                        System.out.println("5. Total males and females in a district");
                        System.out.println("6. Average of all ages");
                        System.out.println("7. Average of ages per district");
                        System.out.println("8. Exit");
                        System.out.print("Enter your choice: ");
                        int choice = scanner.nextInt();
                        switch (choice) {
                            case 1:
                                totalMalesAndFemales();
                                break;
                            case 2:
                                totalResidentsAndNonResidents();
                                break;
                            case 3:
                                Citizen[] citizens;
                                totalPeopleInDistrict(citizens);
                                break;
                            case 4:
                                totalResidentsAndNonResidentsInDistrict();
                                break;
                            case 5:
                                totalMalesAndFemalesInDistrict();
                                break;
                            case 6:
                                averageOfAllAges();
                                break;
                            case 7:
                                averageOfAgesPerDistrict();
                                break;
                            case 8:
                                System.out.println("Goodbye!");
                                break;
                            default:
                                System.out.println("Invalid choice. Please try again.");
                        }
                    }
                             */

                            break;
                        case 5:
                            /**
                             * FILTER OPTION HERE:
                             * Menu 1:
                             * Choose what to filter:
                             * 1 Age ranging from
                             * 2 People living in a specific district
                             * 3 Residency Type
                             * 4 Gender
                             * 5 Name
                             * Menu 2:
                             * Enter district
                             * Menu 3:
                             * 1 Residents only
                             * 2 Non-residents only
                             * Menu 4:
                             * Males only
                             * Females only
                             * Menu 5:
                             * 1 First name starting with letter
                             * 2 Last name starting with letter
                             * Menu 5.1:
                             * Enter letter:
                             */
                            break;
                        case 6:
                            /**
                             * SEARCH OPTION HERE:
                             * Search for:
                             * 1 Name
                             * 2 Email Address
                             * 3 Address
                             * 4 Age
                             * 5 Type of residency
                             * 6 District number
                             * 7 Gender
                             * Input (chosen type to search for)
                             */

                            break;
                        case 7:
                            /**
                             * MODIFY (delete or add) OPTION HERE:
                             * Menu:
                             * 1 Delete a specific person
                             * 2 Add another person
                             */
                            break;
                        case 8:
                            System.exit(0);
                            break;
                        default:
                            System.out.println("Invalid choice. Please enter a number between 1 and 7.");
                    }
            }
            while (choice != 8) ;

            keyboard.close();
        }
        /**
    private void totalMalesAndFemales() {
        Map<String, Integer> genderCounts = new HashMap<>();
        genderCounts.put("male", 0);
        genderCounts.put("female", 0);

        for (Citizen citizen : citizens) {
            String gender = Character.toString(citizen.getGender()).toLowerCase();
            genderCounts.put(gender, genderCounts.get(gender) + 1);
        }

        int totalM = genderCounts.get("male");
        int totalF = genderCounts.get("female");

        System.out.printf("Total males: %d%n", totalM);
        System.out.printf("Total females: %d%n", totalF);
        System.out.printf("Total: %d%n", totalM + totalF);
    }

    private void totalResidentsAndNonResidents() {
        int rCount = 0;
        int nrCount = 0;

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            br.readLine(); // skip headers
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                String residencyStatus = data[0].trim();
                if (residencyStatus.equalsIgnoreCase("resident")) {
                    rCount++;
                } else {
                    nrCount++;
                }
            }


            System.out.println("Number of residents: " + rCount);
            System.out.println("Number of non-residents: " + nrCount);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private static void totalPeopleInDistrict(Citizen[] citizens) {
        // Print out the Citizen objects
        for (Citizen citizen : citizens) {
            System.out.println(citizen);
        }

        Map<Integer, Integer> dCount = new HashMap<>();
        for (Citizen citizen : citizens) {
            int district = citizen.getDistrict();
            if (dCount.containsKey(district)) {
                dCount.put(district, dCount.get(district) + 1);
            } else {
                dCount.put(district, 1);
            }
        }
        System.out.println("\nTotal citizens in each district:");
        for (Map.Entry<Integer, Integer> entry : districtCounts.entrySet()) {
            System.out.printf("District %d: %d%n", entry.getKey(), entry.getValue());
        }
    }

    private void averageOfAgesPerDistrict () {
    }

    private void averageOfAllAges () {
    }

    private void totalResidentsAndNonResidentsInDistrict () {

    }

    private void totalMalesAndFemalesInDistrict () {
    }
         */

}
    


