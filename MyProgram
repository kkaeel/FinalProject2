package prog2.finalgroup;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.File;
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.text.html.parser.Entity;

public class MyProgram {

    public static void main(String[] args) {
        MyProgram program;
        try {
            program = new MyProgram();
            program.run();
        } catch (FileNotFoundException exception1) {
            System.out.println("The data file does not exist.");
        } catch (Exception exception2) {
            exception2.printStackTrace();
        }
        System.exit(0);
    }
    public void run() throws FileNotFoundException, Exception {
        Scanner keyboard = new Scanner(System.in);
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int choice;
        do {
            System.out.println("Welcome to ------");
            System.out.println("<1> Show data");
            System.out.println("<2> Sort data");
            System.out.println("<3> Compare data");
            System.out.println("<4> Compute data");
            System.out.println("<5> Filter data");
            System.out.println("<6> Search for... in data");
            System.out.println("<7> Modify data");
            System.out.println("<8> Exit");
            System.out.print("Enter a number corresponding to your choice: ");
            choice = keyboard.nextInt();
            keyboard.nextLine();
            switch (choice) {
                case 1:
                    // Print out the Citizen objects
                    for (Citizen citizen : citizens) {
                        System.out.printf("%s%n", citizen);
                    }
                    break;
                case 2:
                    /**
                     * SORTING OPTION HERE:
                     * - Menu 1, ascending or descending order?
                     * - Menu 2:
                     * 1 Sort data based on names
                     * 2 Sort data based on age
                     * 3 Sort data based on district number
                     * 4 Sort data based on gender
                     * 5 Sort data based on type of residency
                     */
                    int num;
                    do {
                        System.out.println("What would you like to sort?");
                        System.out.println("Press 1 if you would like to sort by first name");
                        System.out.println("Press 2 if you would like to sort by last name");
                        System.out.println("Press 3 if you would like to sort by email");
                        System.out.println("Press 4 if you would like to sort by address");
                        System.out.println("Press 5 if you would like to sort by age");
                        System.out.println("Press 6 if you would like to sort by type of residency");
                        System.out.println("Press 7 if you would like to sort by district");
                        System.out.println("Press 8 if you would like to sort by gender");
                        System.out.println("Press 9 to exit");
                        System.out.print("\nPlease enter your answer: ");
                        num = Integer.parseInt(keyboard.nextLine());
                        switch (num) {
                            case 1:
                                sortAndPrint(res/data.csv, 0, "first name");
                                break;
                            case 2:
                                sortAndPrint(res/data.csv, 1, "last name");
                                break;
                            case 3:
                                sortAndPrint(res/data.csv, 2, "email");
                                break;
                            case 4:
                                sortAndPrint(res/data.csv, 3, "address");
                                break;
                            case 5:
                                sortAndPrintByAge(res/data.csv);
                                break;
                            case 6:
                                sortAndPrintResidentsFirst(res/data.csv, 5, "type of residency");
                                break;
                            case 7:
                                sortAndPrintByDistrict(res/data.csv);
                                break;
                            case 8:
                                sortAndPrint(res/data.csv, 7, "gender");
                                break;
                            case 9:
                                System.exit(0);
                            default:
                                System.out.println("Invalid option. Please try again.");
                        }
                    } while (num >= 1 && num <= 9);
                    System.out.println("Invalid input please try again");

                    break;
                case 3:
                    /**
                     * COMPARING OPTION HERE:
                     * Compare 2 entities:
                     * - Menu 1: Input: (Last name, First name)
                     * - Enter Name 1:
                     * - Enter Name 2:
                     * - result must be ("Name", "age" is older than "Name","age" ) ("Name", "residency" is a resident whilst "Name","residency" is not) etc.,
                     * - (display compared result on age, type of residency, district number, and gender)
                     */
                    while (true) {
                        System.out.println("COMPARING OPTION HERE:");
                        System.out.print("Enter name of the first resident (or '0' to quit):  ");
                        String input1 = keyboard.nextLine();
                        if (input1.equalsIgnoreCase("0")) break;
                        Entity entity1 = findEntityByName(entities, input1);
                        if (entity1 == null) {
                            System.err.println("Entity not found.");
                            continue;
                        }
                        System.out.print("Enter name of the second resident:  ");
                        String input2 = keyboard.nextLine();
                        if (input2.equalsIgnoreCase("exit")) break;
                        Entity entity2 = findEntityByName(entities, input2);
                        if (entity2 == null) {
                            System.err.println("Entity not found.");
                            continue;
                        }
                        System.out.println("Compare 2 entities:");
                        System.out.println(" - Menu 1: Choose input data:");
                        System.out.println(" 2 Email Address");
                        System.out.println(" 3 Address");
                        System.out.println(" 4 Age");
                        System.out.println(" 5 Type of residency");
                        System.out.println(" 6 District number");
                        System.out.println(" 7 Gender");
                        System.out.print("Enter the number corresponding to the input data you want to compare: ");
                        int option = keyboard.nextInt();
                        keyboard.nextLine(); // Consume newline character
                        compareEntities(entity1, entity2, option);
                    }
                    break;
                case 4:
                    /**
                     * COMPUTE OPTION HERE:
                     * Compute for:
                     * 1 Total males & females (Total males are: "" and total females are: "")
                     * 2 Total residents & non-residents (Total residents are: "" and total non-residents are: "")
                     * 3 Total number of people in a district (Total people in district "" are: "")
                     * 4 Total residents and non-residents that are in a specific district (separated) (Total residents in district "" are: "" and the total non-residents in district "" are: "" )
                     * 5 Total males and females in a specific district (Total males in district "" are: "" and the total females in district "" are: "" )
                     * 6 Average of all ages
                     * 7 Average of ages per district (Average age of district "": "")
                     */
//===== Sort Method =====
            // Method to sort and print CSV data by a specific column

// ===== compareTo method =====


            //Compute Method
            System.out.println("Compute for: ");
            System.out.println("1. Total males & females");
            System.out.println("2. Total residents & non-residents");
            System.out.println("3. Total number of people in a district");
            System.out.println("4. Total residents and non-residents in a district");
            System.out.println("5. Total males and females in a district");
            System.out.println("6. Average of all ages");
            System.out.println("7. Average of ages per district");
            System.out.println("8. Back to Main Menu");
            System.out.print("Enter your choice: ");
            Scanner scanner = new Scanner(System.in);
            choice = keyboard.nextInt();
            switch (choice) {
                case 1:
                    totalMalesAndFemales();
                    break;
                case 2:
                    totalResidentsAndNonResidents();
                    break;
                case 3:
                    totalPeopleInDistrict();
                    break;
                case 4:
                    totalResidentsAndNonResidentsInDistrict();
                    break;
                case 5:
                    totalMalesAndFemalesInDistrict();
                    break;
                case 6:
                    averageOfAllAges();
                    break;
                case 7:
                    averageOfAgesPerDistrict();
                    break;
                case 8:
                    System.out.println("Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
            break;
            case 5:
                /**
                 * FILTER OPTION HERE:
                 * Menu 1:
                 * Choose what to filter:
                 * 1 Age ranging from
                 * 2 People living in a specific district
                 * 3 Residency Type
                 * 4 Gender
                 * 5 Name
                 * Menu 2:
                 * Enter district
                 * Menu 3:
                 * 1 Residents only
                 * 2 Non-residents only
                 * Menu 4:
                 * Males only
                 * Females only
                 * Menu 5:
                 * 1 First name starting with letter
                 * 2 Last name starting with letter
                 * Menu 5.1:
                 * Enter letter:
                 */
                utility = new MyProgramUtility();
                citizens = utility.readDataFileIntoList("res/data.csv");
                System.out.println("FILTER OPTION HERE:");
                System.out.println("Menu 1:");
                System.out.println("Choose what to filter:");
                System.out.println("1 Age ranging from");
                System.out.println("2 People living in a specific district");
                System.out.println("3 Residency Type");
                System.out.println("4 Gender");
                System.out.println("5 Name");
                System.out.print("Enter your choice: ");
                int option = keyboard.nextInt();
                switch (option) {
                    case 1:
                        filterByAgeRange(citizens);
                        break;
                    case 2:
                        filterByDistrict(citizens);
                        break;
                    case 3:
                        filterByResidencyType(citizens);
                        break;
                    case 4:
                        filterByGender(citizens);
                        break;
                    case 5:
                        filterByName(citizens);
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
                keyboard.close();
                break;
            case 6:
                /**
                 * SEARCH OPTION HERE:
                 * Search for:
                 * 1 Name
                 * 2 Email Address
                 * 3 Address
                 * 4 Age
                 * 5 Type of residency
                 * 6 District number
                 * 7 Gender
                 * Input (chosen type to search for)
                 */
                runSearch(); // Run the search method.
                break;
            case 7:
               modify();
                break;
            case 8:
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Please enter a number between 1 and 8.");
        }
    }while (choice != 8) ;
        keyboard.close();
}
    private void averageOfAgesPerDistrict() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int[] districtCounts = new int[20];
        int[] districtSums = new int[20];
        for (Citizen citizen : citizens) {
            districtCounts[citizen.getDistrict() - 1]++;
            districtSums[citizen.getDistrict() - 1] += citizen.getAge();
        }
        for (int i = 0; i < districtCounts.length; i++) {
            double averageAge = (double) districtSums[i] / districtCounts[i];
            System.out.println("Average age in district " + (i + 1) + ": " + averageAge);
        }
    }
    private void averageOfAllAges() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int sum = 0;
        for (Citizen citizen : citizens) {
            sum += citizen.getAge();
        }
        double averageAge = (double) sum / citizens.size();
        System.out.println("Average age: " + averageAge);
    }
    private void totalMalesAndFemalesInDistrict() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int[] districtMaleCounts = new int[20];
        int[] districtFemaleCounts = new int[1200];
        for (Citizen citizen : citizens) {
            if (citizen.getGender() == 'M') {
                districtMaleCounts[citizen.getDistrict()]++;
            } else {
                districtFemaleCounts[citizen.getDistrict()]++;
            }
        }
        for (int i = 1; i <= 10; i++) {
            System.out.println("Total males in district " + i + ": " + districtMaleCounts[i - 1]);
            System.out.println("Total females in district " + i + ": " + districtFemaleCounts[i - 1]);
        }
    }
    private void totalResidentsAndNonResidentsInDistrict() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int[] dResidentCount = new int[20];
        int[] dNonResidentCount = new int[20];
        for (Citizen citizen : citizens) {
            if (citizen.isResident()) {
                dResidentCount[citizen.getDistrict()]++;
            } else {
                dNonResidentCount[citizen.getDistrict()]++;
            }
        }
        for (int i = 1; i <= 10; i++) {
            System.out.println("Total residents in district " + i + ": " + dResidentCount[i - 1]);
            System.out.println("Total non-residents in district " + i + ": " + dNonResidentCount[i - 1]);
        }
    }
    private void totalPeopleInDistrict() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int[] dCounts = new int[20];
        for (Citizen citizen : citizens) {
            dCounts[citizen.getDistrict()]++;
        }
        int totalPeople = 0;
        for (int count : dCounts) {
            totalPeople += count;
        }
        System.out.println("Total number of people in all districts: " + totalPeople);
    }
    /**
     * method totalMalesAndFemales
     * compute the total number of males and females
     */
    private void totalMalesAndFemales() {
        MyProgramUtility utility = new MyProgramUtility();
        List<Citizen> citizens = utility.readDataFileIntoList("res/data.csv");
        int totalMales = 0;
        int totalFemales = 0;
        for (Citizen citizen : citizens) {
            if (citizen.getGender() == 'M') {
                totalMales++;
            } else if (citizen.getGender() == 'F') {
                totalFemales++;
            }
        }
        System.out.println("Total males: " + totalMales);
        System.out.println("Total females: " + totalFemales);
    }
    /**
     * method totalResidentsAndNonResidents
     * computes the total number of residents and non residents
     */
    private void totalResidentsAndNonResidents() {
        String fileName = "res/data.csv";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            int rCount = 0;
            int nrCount = 0;
            String line;
            br.readLine(); // skip headers
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                String residencyStatus = data[0].trim();
                if (residencyStatus.equalsIgnoreCase("resident")) {
                    rCount++;
                } else {
                    nrCount++;
                }
            }
            System.out.println("Number of residents: " + rCount);
            System.out.println("Number of non-residents: " + nrCount);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    // Start of Search Method

    public static void runSearch() {
        // Retrieve user choice and search citizens
        List<Citizen> allCitizens = MyProgramUtility.readDataFileIntoList("data.csv");
        searchCitizens(allCitizens);
    }

    public static void searchCitizens(List<Citizen> citizens) {
        // Display search options for the user.
        System.out.println("Search for (Enter Number):");
        System.out.println("1. Name");
        System.out.println("2. Email Address");
        System.out.println("3. Address");
        System.out.println("4. Age");
        System.out.println("5. Type of residency");
        System.out.println("6. District number");
        System.out.println("7. Gender");

        // Prompt user to select an information about a citizen/citizens that they want to search for.
        Scanner kbd = new Scanner(System.in);
        System.out.println("Enter the number corresponding to the detail/information of the citizen you want to search for:");
        int detail = kbd.nextInt();
        kbd.nextLine(); // Consume newline

        String userInput = "";
        switch (detail) {
            case 1:
                System.out.print("Please enter the full name of the citizen: ");
                userInput = kbd.nextLine();
                break;
            case 2:
                System.out.print("Please enter the email address of the citizen: ");
                userInput = kbd.nextLine();
                break;
            case 3:
                System.out.print("Please enter the home address of the citizen/citizens: ");
                userInput = kbd.nextLine();
                break;
            case 4:
                System.out.print("Please enter the age of the citizen/citizens:");
                userInput = kbd.nextLine();
                break;
            case 5:
                System.out.print("Please enter the type of residency of the citizen/citizens:");
                userInput = kbd.nextLine();
                break;
            case 6:
                System.out.print("Please enter the district number of the citizen/citizens: ");
                userInput = kbd.nextLine();
                break;
            case 7:
                System.out.println("Please enter the gender of the citizen/citizens: ");
                userInput = kbd.nextLine();
                break;
            default:
                System.out.println("Invalid details provided.");
                return;
        }

        // Display search results based on the selected detail
        System.out.println("Search results from the selected information: ");
        System.out.println();
        System.out.printf("%-30s%-60s%-50s%-10s%-15s%-10s%-5s%n",
                "Full Name", "Email Address", "Home Address", "Age", "Residency", "District", "Gender");
        System.out.println("=======================================================================================================================================================================================");
        boolean found = false;
        for (Citizen citizen : citizens) {
            String citizenDetail = "";
            switch (detail) {
                case 1:
                    citizenDetail = citizen.getFullName();
                    break;
                case 2:
                    citizenDetail = citizen.getEmail();
                    break;
                case 3:
                    citizenDetail = citizen.getAddress();
                    break;
                case 4:
                    citizenDetail = String.valueOf(citizen.getAge());
                    break;
                case 5:
                    // Check if user input matches "Resident" or "Non-Resident"
                    if (userInput.equalsIgnoreCase("Resident")) {
                        citizenDetail = String.valueOf(citizen.isResident() ? "Resident" : "Non-Resident");
                    } else if (userInput.equalsIgnoreCase("Non-Resident")) {
                        citizenDetail = String.valueOf(!citizen.isResident() ? "Non-Resident" : "Resident");
                    }
                    break;
                case 6:
                    citizenDetail = String.valueOf(citizen.getDistrict());
                    break;
                case 7:
                    citizenDetail = String.valueOf(citizen.getGender());
                    break;
            }
            if (citizenDetail.equalsIgnoreCase(userInput)) {
                found = true;
                String residency = citizen.isResident() ? "Resident" : "Non-Resident";
                System.out.printf("%-30s%-60s%-50s%-10d%-15s%-10d%-5c%n",
                        citizen.getFullName(),
                        citizen.getEmail(),
                        citizen.getAddress(),
                        citizen.getAge(),
                        residency,
                        citizen.getDistrict(),
                        citizen.getGender());
            }
        }
        if (!found) {
            System.out.println("No matching citizen found with the entered information.");
            // Prompt user to search again only if the user wants to
            System.out.println("Do you want to search again? (Yes/No): ");
            String searchAgain = kbd.nextLine();
            if (searchAgain.equalsIgnoreCase("Yes")) {
                searchCitizens(citizens);
            } else if (searchAgain.equalsIgnoreCase("No")) {
                // Do nothing, let the program continue
            } else {
                System.out.println("Invalid input. Exiting search.");
            }
        }
    }

// End of Search Method

    //modifyyy methodd 
    protected static void modify() throws Exception {
            boolean continueModifying = true;
            Scanner keyboard = new Scanner(System.in);

            while (continueModifying) {
                List<Citizen> citizens = MyProgramUtility.readDataFileIntoList("res/data.csv");
                int choice = 0;
                boolean continueLooping = true;

                while (continueLooping) {
                    System.out.println("Modify data");
                    System.out.println("Options:");
                    System.out.println("1. Add");
                    System.out.println("2. Delete");
                    System.out.print("Input choice: ");
                    choice = keyboard.nextInt();
                    keyboard.nextLine();

                    switch (choice) {
                        case 1:
                            // Code for adding data
                            continueLooping = false; // Exit loop after valid input
                            break;
                        case 2:
                            // Code for deleting data
                            continueLooping = false; // Exit loop after valid input
                            break;
                        default:
                            System.out.println("Invalid choice. Please enter 1 or 2.");
                            break;
                    }
                }

                switch (choice) {
                    case 1:
                        System.out.println("Add data");
                        File dataFile = new File("res/data.csv");
                        try (PrintWriter writer = new PrintWriter(new FileWriter(dataFile, true))) {

                            String firstName = null;
                            String lastName = null;
                            String fullName = null;

                            while (fullName == null) {
                                System.out.print("Enter the first name: ");
                                firstName = keyboard.nextLine();
                                if (firstName.equals("")) {
                                    System.out.println("First name cannot be empty. Please try again.");
                                } else {
                                    System.out.print("Enter the last name: ");
                                    lastName = keyboard.nextLine();
                                    if (lastName.isEmpty()) {
                                        System.out.println("Last name cannot be empty. Please try again.");
                                    } else {
                                        fullName = firstName + " " + lastName;
                                    }
                                }
                            }

                            String email = null;
                            while (email == null) {
                                System.out.print("Enter the email address: ");
                                email = keyboard.nextLine();
                                if (!email.contains("@") || !email.contains(".com")) {
                                    System.out.println("Invalid email address. Please try again.");
                                    email = null;
                                }
                            }

                            String address = null;
                            while (address == null) {
                                System.out.print("Enter the address: ");
                                address = keyboard.nextLine();
                                if (address.isEmpty()) {
                                    System.out.println("Address cannot be empty. Please try again.");
                                    address = null;
                                }
                            }

                            int age = 0;
                            while (age <= 0) {
                                System.out.print("Enter the age: ");
                                try {
                                    age = Integer.parseInt(keyboard.nextLine());
                                } catch (NumberFormatException e) {
                                    System.out.println("Invalid age. Please enter a valid number.");
                                    age = 0;
                                }
                                if (age <= 0) {
                                    System.out.println("Age must be greater than zero. Please try again.");
                                }
                            }

                            String residentInput = null;
                            boolean isResident = false;
                            String resident = "";
                            while (residentInput == null) {
                                System.out.print("Enter if resident (yes/no): ");
                                residentInput = keyboard.nextLine();
                                if (residentInput.equalsIgnoreCase("yes")) {
                                    isResident = true;
                                    resident = "resident";
                                } else if (residentInput.equalsIgnoreCase("no")) {
                                    isResident = false;
                                    resident = "non-resident";
                                } else {
                                    System.out.println("Invalid resident input. Please enter either 'yes' or 'no'.");
                                    residentInput = null;
                                }
                            }

                            String districtInput = null;
                            int district = 0;
                            while (districtInput == null) {
                                System.out.print("Enter the district: ");
                                try {
                                    districtInput = keyboard.nextLine();
                                    district = Integer.parseInt(districtInput);
                                } catch (NumberFormatException e) {
                                    System.out.println("Invalid district. Please enter a valid number.");
                                    districtInput = null;
                                }
                            }

                            char genderInput;
                            String gender = "";

                            while (gender.isEmpty()) {
                                System.out.print("Enter the gender (m/f): ");
                                genderInput = keyboard.nextLine().charAt(0);
                                if (genderInput == 'm') {
                                    gender = "Male";
                                } else if (genderInput == 'f') {
                                    gender = "Female";
                                } else {
                                    System.out.println("Invalid gender input. Please enter either 'm' or 'f'.");
                                    gender = "";
                                }
                            }

                            writer.println(firstName +","+ lastName + "," + email + "," + address + "," + age + "," + resident + "," + district + "," + gender);
                        } catch (FileNotFoundException e) {
                            System.out.println("The file does not exist.");
                        }
                        System.out.println("Adding done!");
                        break;
                    case 2:
                        boolean validChoice = false;
                        int detail = 0;
                        String userInput = "";

                        while (!validChoice) {
                            System.out.println("Delete data");
                            System.out.println("===========");
                            System.out.println("1. Name");
                            System.out.println("2. Email Address");
                            System.out.println("3. Address");
                            System.out.print("Search for data to be deleted through (Enter Number): ");
                            Scanner kbd = new Scanner(System.in);
                            detail = kbd.nextInt();
                            kbd.nextLine(); // Consume the newline character

                            switch (detail) {
                                case 1:
                                    System.out.print("Please enter the full name of the citizen: ");
                                    userInput = kbd.nextLine();
                                    validChoice = true;
                                    break;
                                case 2:
                                    System.out.print("Please enter the email address of the citizen: ");
                                    userInput = kbd.nextLine();
                                    validChoice = true;
                                    break;
                                case 3:
                                    System.out.print("Please enter the home address of the citizen/citizens: ");
                                    userInput = kbd.nextLine();
                                    validChoice = true;
                                    break;
                                default:
                                    System.out.println("Invalid choice. Please try again.");
                                    break;
                            }
                        }
                        searchDeleteCitizens(citizens, detail, userInput);
                        System.out.println("Deleting done!");
                        break;
                }
                System.out.print("Do you want to continue modifying? (yes/no): ");
                String continueResponse = keyboard.next();
                if (!continueResponse.equalsIgnoreCase("yes")) {
                    continueModifying = false;
                    System.out.println("Modifying done!");
                }
            }
        }


        public static void searchDeleteCitizens(List<Citizen> citizens, int detail, String userInput) {
            List<String> lines = new ArrayList<>();

            try (BufferedReader reader = new BufferedReader(new FileReader("res/data.csv"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    lines.add(line);
                }
            } catch (IOException e) {
                System.err.println("Error reading file: " + e.getMessage());
                return;
            }

            System.out.println("Search results from the selected information: ");
            System.out.printf("%-20s %-50s %-45s %-5s %-10s %-10s %-5s%n",
                    "Full Name", "Email Address", "Home Address", "Age", "Residency", "District", "Gender");
            System.out.println("================================================================================================================================================================");

            List<String> filteredLines = new ArrayList<>();
            boolean foundResults = false; // Flag to track if any results were found

            for (String line : lines) {
                String[] values = line.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                Citizen citizen = new Citizen(values[0], values[1], values[2], values[3], Integer.parseInt(values[4]), Boolean.parseBoolean(values[5]), Integer.parseInt(values[6]), values[7].charAt(0));

                switch (detail) {
                    case 1:
                        if (citizen.getFullName().equalsIgnoreCase(userInput)) {
                            String residency = citizen.isResident() ? "Resident" : "Non-Resident";
                            System.out.printf("%-20s %-50s %-45s %-5d %-10s %-10d %-5c%n",
                                    citizen.getFullName(),
                                    citizen.getEmail(),
                                    citizen.getAddress(),
                                    citizen.getAge(),
                                    residency,
                                    citizen.getDistrict(),
                                    citizen.getGender());
                            foundResults = true; // Set flag to true since result found
                        } else {
                            filteredLines.add(line);
                        }
                        break;
                    case 2:
                        if (citizen.getEmail().equalsIgnoreCase(userInput)) {
                            String residency = citizen.isResident() ? "Resident" : "Non-Resident";
                            System.out.printf("%-20s %-50s %-45s %-5d %-10s %-10d %-5c%n",
                                    citizen.getFullName(),
                                    citizen.getEmail(),
                                    citizen.getAddress(),
                                    citizen.getAge(),
                                    residency,
                                    citizen.getDistrict(),
                                    citizen.getGender());
                            foundResults = true; // Set flag to true since result found
                        } else {
                            filteredLines.add(line);
                        }
                        break;
                    case 3:
                        if (citizen.getAddress().equalsIgnoreCase(userInput)) {
                            String residency = citizen.isResident() ? "Resident" : "Non-Resident";
                            System.out.printf("%-20s %-50s %-45s %-5d %-10s %-10d %-5c%n",
                                    citizen.getFullName(),
                                    citizen.getEmail(),
                                    citizen.getAddress(),
                                    citizen.getAge(),
                                    residency,
                                    citizen.getDistrict(),
                                    citizen.getGender());
                            foundResults = true; // Set flag to true since result found
                        } else {
                            filteredLines.add(line);
                        }
                        break;
                    default:
                        System.out.println("Invalid search field.");
                }
            }

            if (!foundResults) {
                System.out.println("No results found for the search query.");
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("res/data.csv"))) {
                for (String line : filteredLines) {
                    writer.write(line);
                    writer.newLine();
                }
            } catch (IOException e) {
                System.err.println("Error writing file");
            }
            System.out.println("================================================================================================================================================================");

        }
    }
    private static void filterByAgeRange(List<Citizen> citizens) {
    }
    private static void filterByDistrict(List<Citizen> citizens) {
    }
    private static void filterByResidencyType(List<Citizen> citizens) {
    }
    private static void filterByGender(List<Citizen> citizens) {
    }
    private static void filterByName(List<Citizen> citizens) {
    }
    private static void sortAndPrint(List<String[]> data, int columnIndex, String columnName) {
        Scanner kbd = new Scanner(System.in);
        System.out.println("To sort them by ascending order, please press one");
        System.out.println("To sort them by descending order, please press two");
        int order = Integer.parseInt(kbd.nextLine());
        switch (order) {
            case 1:
                System.out.println("Ascending order by " + columnName + ":");
                Collections.sort(data, Comparator.comparing(a -> a[columnIndex]));
                printCsvData(data);
                break;
            case 2:
                System.out.println("Descending order by " + columnName + ":");
                Collections.sort(data, (a, b) -> b[columnIndex].compareTo(a[columnIndex]));
                printCsvData(data);
                break;
            default:
                System.out.println("Invalid option. Please try again.");
        }
    }
    // Method to sort and print CSV data by age
    private static void sortAndPrintByAge(List<String[]> data) {
        Scanner kbd = new Scanner(System.in);
        System.out.println("To sort them by ascending order, please press one");
        System.out.println("To sort them by descending order, please press two");
        int order = Integer.parseInt(kbd.nextLine());
        switch (order) {
            case 1:
                System.out.println("Ascending order by age:");
                Collections.sort(data, Comparator.comparingInt(a -> Integer.parseInt(a[4])));
                printCsvData(data);
                break;
            case 2:
                System.out.println("Descending order by age:");
                Collections.sort(data, (a, b) -> Integer.parseInt(b[4]) - Integer.parseInt(a[4]));
                printCsvData(data);
                break;
            default:
                System.out.println("Invalid option. Please try again.");
        }
    }
    // Method to sort and print CSV data by district
    private static void sortAndPrintByDistrict(List<String[]> data) {
        Scanner kbd = new Scanner(System.in);
        System.out.println("To sort them by ascending order, please press one");
        System.out.println("To sort them by descending order, please press two");
        int order = Integer.parseInt(kbd.nextLine());
        switch (order) {
            case 1:
                System.out.println("Ascending order by district:");
                Collections.sort(data, Comparator.comparingInt(a -> Integer.parseInt(a[6])));
                printCsvData(data);
                break;
            case 2:
                System.out.println("Descending order by district:");
                Collections.sort(data, (a, b) -> Integer.parseInt(b[6]) - Integer.parseInt(a[6]));
                printCsvData(data);
                break;
            default:
                System.out.println("Invalid option. Please try again.");
        }
    }
    // Method to sort and print CSV data, with residents first
    private static void sortAndPrintResidentsFirst(List<String[]> data, int columnIndex, String columnName) {
        List<String[]> residents = new ArrayList<>();
        List<String[]> nonResidents = new ArrayList<>();
        // Separate residents and non-residents
        for (String[] row : data) {
            if (row.length > columnIndex && row[columnIndex].equalsIgnoreCase("resident")) {
                residents.add(row);
            } else {
                nonResidents.add(row);
            }
        }
        // Sort both residents and non-residents alphabetically
        Collections.sort(residents, Comparator.comparing(a -> a[columnIndex].toLowerCase()));
        Collections.sort(nonResidents, Comparator.comparing(a -> a[columnIndex].toLowerCase()));
        // Print residents first, then non-residents
        System.out.println("Residents:");
        printCsvData(residents);
        System.out.println("\nNon-Residents:");
        printCsvData(nonResidents);
    }
    private static void printCsvData(List<String[]> data) {
        for (String[] row : data) {
            for (int i = 0; i < row.length; i++) {
                // Check if the current column index is age or district
                if (i == 4 || i == 6) {
                    // Convert age or district to integer before printing
                    System.out.print(Integer.parseInt(row[i]));
                } else {
                    // For other columns, directly print the value
                    System.out.print(row[i]);
                }
                // Add a comma after each value except the last one
                if (i < row.length - 1) {
                    System.out.print(",");
                }
            }
            // Print a new line after each row
            System.out.println();
        }// ===== end of sort method =====
    }
    private static List<Entity> readEntitiesFromFile(String fileName) {
        List<Entity> entities = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                Entity entity = new Entity();
                String[] columns = line.split(",");
                if (columns.length < 7) { // Check if the array has at least 7 elements
                    System.err.println("Invalid line: " + line);
                    continue;
                }
                entity.setName(columns[NAME_INDEX]);
                entity.setEmailAddress(columns[EMAIL_INDEX]);
                entity.setAddress(columns[ADDRESS_INDEX]);
                try {
                    entity.setAge(Integer.parseInt(columns[AGE_INDEX]));
                } catch (NumberFormatException e) {
                    System.err.println("Invalid age: " + columns[AGE_INDEX]);
                    continue;
                }
                try {
                    entity.setDistrictNumber(Integer.parseInt(columns[DISTRICT_NUMBER_INDEX]));
                } catch (NumberFormatException e) {
                    System.err.println("Invalid district number: " + columns[DISTRICT_NUMBER_INDEX]);
                    continue;
                }
                entity.setTypeOfResidency(columns[RESIDENCY_INDEX]);
                entity.setGender(columns[GENDER_INDEX]);
                entities.add(entity);
            }
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + e.getMessage(), e);
        }
        return entities;
    }
    private static Entity findEntityByName(List<Entity> entities, String name) {
        Map<String, Entity> entityMap = new HashMap<>();
        for (Entity entity : entities) {
            entityMap.put(entity.getName().toLowerCase(), entity);
        }
        return entityMap.get(name.toLowerCase());
    }
    private static void compareEntities(Entity entity1, Entity entity2, int choice) {
        switch (choice) {
            case 2: // Email Address
                System.out.println("(" + entity1.getName() + ", " + entity1.getEmail() + " while " + entity2.getName() + ", " + entity2.getEmail() + ")");
                break;
            case 3: // Address
                System.out.println("(" + entity1.getName() + ", lives in" + entity1.getAddress() + " while " + entity2.getName() + ", lives in" + entity2.getAddress() + ")");
                break;
            case 4: // Age
                System.out.println("(" + entity1.getName() + ", " + entity1.getAge() + " is older than " + entity2.getName() + ", " + entity2.getAge() + ")");
                break;
            case 5: // Type of Residency
                System.out.println("(" + entity1.getName() + ", is a " + entity1.getTypeOfResidency() + " while " + entity2.getName() + " is a " + entity2.getTypeOfResidency() + ")");
                break;
            case 6: // District Number
                System.out.println("(" + entity1.getName() + ", " + " lives in # " + entity1.getDistrictNumber() + " while " + entity2.getName() + ", " + " lives in # " + entity2.getDistrictNumber() + ")");
                break;
            case 7: // Gender
                System.out.println("(" + entity1.getName() + " is " + entity1.getGender() + " while " + entity2.getName() + " is " + entity2.getGender() + ")");
                break;
            default:
                System.out.println("Invalid choice.");
        }
    }// ===== end of compareTo method =====
}
